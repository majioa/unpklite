ANALIZER	PROC	NEAR
INT_1:
	MOV	CS:[AN_OLD_SS_],SS
	MOV	CS:[AN_OLD_SP_],SP
	CLI
	MOV	SS,CS:[AN_NEW_SS_]
	MOV	SP,CS:[AN_NEW_SP_]
	STI
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	BP
	PUSH	DS
	PUSH	ES
	MOV	BP,CS:[AN_OLD_SP_]
	MOV	DS,CS:[AN_OLD_SS_]
	MOV	ES,DS:[BP+2]
	MOV	BX,DS:[BP]
	CALL	TIMER
	TEST	CS:[AN_FLAGS_],10000000B
	JZ	NO_COMMAND_CMP
	PUSH	CX
	PUSH	DX
	PUSH	SI
	PUSH	DS
	MOV	CX,16
	MOV	DS,CS:[COMMAND_ADRESS_SEG_]
	MOV	SI,CS:[COMMAND_ADRESS_OFF_]
	MOV	DX,CS:[COMMAND_CHART_]
REPEAT_1:
	RCL	DX,1
	JNC	PASSING
	MOV	AL,DS:[SI]
	CMP	AL,ES:[BX]
	JNZ	INT_1_NOT_EQUAL
PASSING:
	INC	SI
	INC	BX
	LOOP	REPEAT_1
	POP	DS
	POP	SI
	POP	DX
	POP	CX
	MOV	CS:[ERRORLEVEL_],1
	JMP	ANALIZER_EXITER
INT_1_NOT_EQUAL:
	POP	DS
	POP	SI
	POP	DX
	POP	CX
NO_COMMAND_CMP:
ANALIZER_NOT_COMMAND:
	CALL	CALCULATE_ABS_ADRESS
	TEST	CS:[AN_FLAGS_],01000000B
	JZ	NO_BEGIN_CMP
	CMP	CS:[ABS_ADRESS_H_BEGIN_],CL
	JA	ANALIZER_EXIT_1
	CMP	CS:[ABS_ADRESS_L_BEGIN_],AX
	JAE	ANALIZER_EXIT_1
NO_BEGIN_CMP:
	TEST	CS:[AN_FLAGS_],00100000B
	JZ	NO_END_CMP
	CMP	CS:[ABS_ADRESS_H_END_],CL
	JB	ANALIZER_EXIT_2
	CMP	CS:[ABS_ADRESS_L_END_],AX
	JA	NO_END_CMP
ANALIZER_EXIT_2:
	MOV	CS:[ERRORLEVEL_],3
	JMP	ANALIZER_EXITER
ANALIZER_EXIT_1:
	MOV	CS:[ERRORLEVEL_],2
	JMP	SHORT	ANALIZER_EXITER
NO_END_CMP:
	TEST	CS:[AN_FLAGS_],00010000B
	JZ	TURN_1
	MOV	BX,SP
	MOV	ES,SS:[BX+2]
	MOV	BX,SI
	CALL	CALCULATE_ABS_ADRESS
	LEA	BX,SOURCE_L_
	CALL	MOVES
TURN_1:
	TEST	CS:[AN_FLAGS_],00001000B
	JZ	TURN_2
	MOV	BX,SP
	MOV	ES,SS:[BX]
	MOV	BX,DI
	CALL	CALCULATE_ABS_ADRESS
	LEA	BX,DESTINATION_L_
	CALL	MOVES
TURN_2:
	TEST	CS:[AN_FLAGS_],00000100B
	JZ	TURN_3
	MOV	ES,CS:[AN_OLD_SS_]
	MOV	BX,CS:[AN_OLD_SP_]
	CALL	CALCULATE_ABS_ADRESS
	LEA	BX,STACK_L_
	CALL	MOVES
TURN_3:
	TEST	CS:[AN_FLAGS_],1
	JZ	TURN_4
	MOV	BX,SP
	MOV	BX,SS:[BX+8]
	CALL	MOVES1
TURN_4:
	OR	BYTE PTR DS:[BP+5],00000001B
ANALIZER_EXITER_1:
	POP	ES
	POP	DS
	POP	BP
	POP	CX
	POP	BX
	POP	AX
	CLI
	MOV	SS,CS:[AN_OLD_SS_]
	MOV	SP,CS:[AN_OLD_SP_]
	STI
	IRET
ANALIZER_EXITER:
	MOV	AX,CS:[LEAVE_ADRESS_SEG_]
	XCHG	DS:[BP+2],AX
	MOV	CS:[CURRENT_ADRESS_SEG_],AX
	MOV	AX,CS:[LEAVE_ADRESS_OFF_]
	XCHG	DS:[BP],AX
	MOV	CS:[CURRENT_ADRESS_OFF_],AX
	AND	BYTE PTR DS:[BP+5],11111110B
	JMP	SHORT	ANALIZER_EXITER_1
CALCULATE_ABS_ADRESS:
	;ES:BX-ADRESS
	PUSH	BX
	XOR	CX,CX
	MOV	AX,ES
	MOV	CL,4
	ROL	AX,CL
	MOV	CL,AL
	AND	CL,0FH
	AND	AX,0FFF0H
	ADD	AX,BX
	ADC	CL,CH
	POP	BX
	RET
	;CL:AX-ABS_ADRESS
MOVES:
	TEST	CS:[AN_FLAGS_],00000010B
	JNZ	MOVES_1
	CMP	CL,CS:[BX+2]
	JB	MOVES_EXIT
	JA	MOVES_OK
	CMP	AX,CS:[BX]
	JBE	MOVES_EXIT
MOVES_OK:
	MOV	CS:[BX],AX
	MOV	CS:[BX+2],CL
	RET
MOVES_1:
	CMP	CL,CS:[BX+2]
	JA	MOVES_EXIT
	JB	MOVES_OK
	CMP	AX,CS:[BX]
	JB	MOVES_OK
MOVES_EXIT:
	RET
MOVES1:
	TEST	CS:[AN_FLAGS_],00000010B
	JNZ	MOVES1_1
	CMP	BX,CS:[AN_BX_]
	JBE	MOVES1_EXIT
MOVES1_OK:
	MOV	CS:[AN_BX_],BX
	RET
MOVES1_1:
	CMP	BX,CS:[AN_BX_]
	JB	MOVES1_OK
MOVES1_EXIT:
	RET

AN_FLAGS_	DB	0
		;7-BIT=USE EXIT SEQUANCE
		;6-BIT=USE BEGIN ABS EXIT ADRESS
		;5-BIT=USE END ABS EXIT ADRESS
		;4-BIT=USE REGISTERS OF SOURCE
		;3-BIT=USE REGISTERS OF DESTINATION
		;2-BIT=USE STACK REGISTERS
		;1-BIT=DESTINATION
		;0-BIT=USE REGISTER BX
SOURCE_L_	DW	0
SOURCE_H_	DB	0
DESTINATION_L_	DW	0
DESTINATION_H_	DB	0
STACK_L_	DW	0
STACK_H_	DB	0
AN_BX_	DW	0


ABS_ADRESS_L_BEGIN_	DW	0
ABS_ADRESS_H_BEGIN_	DB	0
ABS_ADRESS_L_END_	DW	0
ABS_ADRESS_H_END_	DB	0

LEAVE_ADRESS_OFF_	DW	0
LEAVE_ADRESS_SEG_	DW	0

CURRENT_ADRESS_OFF_	DW	0
CURRENT_ADRESS_SEG_	DW	0

COMMAND_CHART_	DW	0
COMMAND_ADRESS_OFF_	DW	0
COMMAND_ADRESS_SEG_	DW	0

ERRORLEVEL_	DB	0

AN_OLD_SP_	DW	0
AN_OLD_SS_	DW	0
AN_NEW_SP_	DW	0
AN_NEW_SS_	DW	0

ENDP
TIMER	PROC
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	XOR	AL,AL
	OUT	70H,AL
	JMP	$+2
	IN	AL,71H
	CMP	AL,CS:[CURRENT_SECOND_]
	JZ	TIMER_NOT_EQUAL
	MOV	CS:[CURRENT_SECOND_],AL
	MOV	AH,2
	MOV	DL,'.'
	INT	21H
TIMER_NOT_EQUAL:
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	RET
CURRENT_SECOND_	DB	0
ENDP

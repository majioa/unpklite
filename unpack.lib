UNPACK	PROC	NEAR
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	SI
	PUSH	DI
	
	PUSH	SI
	MOV	AX,CS:[PSP_]
	MOV	DS,AX
	XOR	DX,DX
	PUSH	CS
	POP	ES
	XOR	AX,AX
	INC	AX
	CMP	AL,CS:[TYPE_OF_FILE_]
	JZ	LOAD_COM_F
	DEC	AX
LOAD_COM_F:
	CALL	LOAD_FILE
	CALL	UNPACKING
	POP	SI
	JC	UNPACK_ERROR
	CALL	CREATE_NEW_FILE
UNPACK_ERROR:
	POP	DI
	POP	SI
	POP	DX
	POP	CX
	POP	BX
	RET
INT_1_OFF_	DW	0
INT_1_SEG_	DW	0
COMMAND_SEQ_1_:
	MOV	BP,BX
	ADD	BX,10H
COMMAND_SEQ_2_:
	MOV	SI,AX
	MOV	DI,AX
	RETF
OLD_AX_	DW	0
OLD_BP_	DW	0
ENDP
UNPACKING	PROC	NEAR
	PUSH	AX
	PUSH	BX
	LEA	BX,END_UNPACKING
	MOV	AX,CS:[METHOD_]
	OR	AH,AH
	JZ	UNPACKING_1
	PUSH	BX
	JMP	USE_UNPROTECTOR
UNPACKING_1:
	CALL	USE_UNPACKER
END_UNPACKING:
	POP	BX
	POP	AX
	RET
	;DS:SI-OLD STACK
	;ES:DI-BEGIN ADRESS OF PROGRAM
	;CL:DX-MAX ABS ES:DI
ENDP



USE_UNPROTECTOR	PROC

	PUSH	CS
	POP	DS
	LEA	SI,UNPROTECTING_
	CALL	WRITE_WORD
	LEA	SI,INT_1
	CALL	INIT_INT
	MOV	CS:[INT_1_OFF_],SI
	MOV	CS:[INT_1_SEG_],DS

	MOV	AX,100H
	MOV	BX,CS:[PSP_]
	XOR	CX,CX
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	CX
	MOV	AX,CS	
	LEA	SI,UNPACK_RPS_EXIT
	MOV	DS,AX
	MOV	CX,AX
	MOV	DX,80H
	MOV	BL,01000001B
	CALL	SET_UP_ANALIZER
	ADD	SP,8

	MOV	AX,CS:[PSP_]
	MOV	CS:[OLD_SS_],SS
	MOV	CS:[OLD_SP_],SP
	
	MOV	BX,-2
	CLI
	MOV	SS,AX
	MOV	SP,BX
	STI
	pushF
	MOV	BP,SP
	or	BYTE PTR ss:[bp+1],1h
	MOV	BX,100H
	PUSH	AX
	PUSH	BX
	MOV	AX,CS:[PSP_]
	MOV	ES,AX
	MOV	DS,AX
	XOR	AX,AX
	MOV	BX,AX
	MOV	CX,AX
	MOV	DX,AX
	MOV	SI,AX
	MOV	DI,AX
	MOV	BP,AX
	IRET
UNPACK_RPS_EXIT:
	CLI
	MOV	SS,CS:[OLD_SS_]
	MOV	SP,CS:[OLD_SP_]
	STI
	MOV	SI,CS:[INT_1_OFF_]
	MOV	DS,CS:[INT_1_SEG_]
	CALL	INIT_INT
	MOV	DX,CS:[AN_BX_]
	XOR	CX,CX
	MOV	ES,CS:[PSP_]
	MOV	DI,100H
	MOV	CS:[LENGHT_],BX
	CALL	ENT
	CLC
	RET
ENDP	

USE_UNPACKER	PROC
	CMP	CS:[TYPE_OF_FILE_],1
	JZ	USE_UNPACKER_OK
	MOV	AX,CS:[PACKER_VERSION_]
	CMP	AL,15
	JZ	USE_UNPACKER_OK
	STC
	RET
USE_UNPACKER_OK:
	PUSH	DS
	
	PUSH	CS
	POP	DS
	LEA	SI,UNPACKING_
	CALL	WRITE_WORD

	POP	DS
	PUSH	SI
	LEA	SI,INT_1
	PUSH	CS
	POP	DS
	CALL	INIT_INT
	MOV	CS:[INT_1_OFF_],SI
	MOV	CS:[INT_1_SEG_],DS

	MOV	AX,CS
	LEA	SI,EXIT_
	MOV	DS,AX
	LEA	DI,COMMAND_SEQ_2_
	CMP	CS:[TYPE_OF_FILE_],1
	JZ	COMP_COM
	LEA	DI,COMMAND_SEQ_1_
COMP_COM:
	MOV	ES,AX
	MOV	CX,AX
	MOV	DX,80H
	MOV	BL,10000000B
	MOV	AX,1111100000000000B
	CALL	SET_UP_ANALIZER
	POP	SI

	MOV	DS,CS:[PSP_]
	MOV	DI,CS:[START_SEG_]
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	COM_1
	PUSH	ES
	MOV	ES,DI
	MOV	ES:[7],DI
	POP	ES
COM_1:
	MOV	SI,DI
	MOV	CS:[OLD_SS_],SS
	MOV	CS:[OLD_SP_],SP
	
	MOV	AX,-10H
	MOV	BX,-2
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	STACK_COM
	MOV	AX,DS:[0EH]
	MOV	BX,DS:[10H]
STACK_COM:
	ADD	SI,AX
	CLI
	MOV	SS,SI
	MOV	SP,BX
	STI
	pushF
	MOV	BP,SP
	or	BYTE PTR ss:[bp+1],1h
	MOV	AX,DI
	MOV	BX,100H
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	SEG_COM
	MOV	BX,DS:[14H]
	ADD	AX,DS:[16H]
	ADD	AX,10H
SEG_COM:
	SUB	AX,10H
	PUSH	AX
	PUSH	BX
	MOV	AX,CS:[PSP_]
	MOV	ES,AX
	MOV	DS,AX
	XOR	AX,AX
	MOV	BX,AX
	MOV	CX,AX
	MOV	DX,AX
	MOV	SI,AX
	MOV	DI,AX
	MOV	BP,AX
	IRET
EXIT_:
	CLI
	MOV	SS,CS:[OLD_SS_]
	MOV	SP,CS:[OLD_SP_]
	STI


	PUSH	SI
	PUSH	DS
	MOV	SI,CS:[INT_1_OFF_]
	MOV	DS,CS:[INT_1_SEG_]
	CALL	INIT_INT
	POP	DS
	POP	SI


	MOV	BX,DI
	CALL	CALCULATE_ABS_ADRESS
	PUSH	AX
	PUSH	CX
	MOV	ES,CS:[START_SEG_]
	XOR	BX,BX
	CALL	CALCULATE_ABS_ADRESS
	POP	BX
	POP	DX
	SUB	DX,AX
	SBB	BL,CL
	CMP	CS:[TYPE_OF_FILE_],1
	JNZ	EXIT_EXE
	MOV	CS:[LENGHT_],DX
	MOV	CS:[HIGH_LENGHT_],BL
	CALL	ENT
	RET
EXIT_EXE:
	MOV	CS:[LEN_L_],DX
	MOV	CS:[LEN_H_],BL

	MOV	ES,CS:[LEAVE_BLOCK_]
	XOR	DI,DI
	XOR	DX,DX	
EXIT_3:
	XOR	AX,AX
	LODSB
	MOV	CX,AX
	JCXZ	EXIT_1
	LODSW
	MOV	BP,AX
EXIT_2:
	MOVSW
	MOV	AX,BP
	STOSW
	INC	DX
	LOOP	EXIT_2
	JMP	SHORT	EXIT_3	
EXIT_1:
	MOV	CS:[NUMBER_OF_ELEMENTS_IN_TABLE_OF_REMOVINGS_],DX
	PUSH	CS
	POP	ES
	LEA	DI,BEGIN_SS_
	MOVSW;SS
	MOVSW;SP
	LODSW;CS
	MOV	CS:[DI+4],AX
	LODSW;IP
	MOV	CS:[DI+2],AX
	

	SHL	DX,1
	SHL	DX,1
	ADD	DX,15
	MOV	CL,4
	SHR	DX,CL
	ADD	DX,HEADER_
	PUSH	DX
	SHL	DX,CL
	XOR	BX,BX
	MOV	CX,CS:[LEN_L_]
	ADD	CX,DX
	ADC	BL,CS:[LEN_H_]
	MOV	CS:[LENGHT_],CX
	MOV	CS:[HIGH_LENGHT_],BL
	MOV	DX,CX


;LEN
	MOV	CL,9
	MOV	AX,DX
	AND	DX,1FFH
	SHR	AX,CL
	DEC	CL
	DEC	CL
	XOR	BH,BH
	SHL	BX,CL
	OR	BX,AX
	INC	BX
	MOV	CS:[NUMBER_OF_FIELDS_],BX
	MOV	CS:[LAST_FIELD_],DX
	POP	DX
	
	MOV	CL,4
	MOV	AX,CS:[START_SEG_]
	SUB	AX,DX
	MOV	ES,AX
	PUSH	AX
	XOR	DI,DI
	PUSH	CS
	POP	DS
	XOR	SI,SI
	MOV	DS,CS:[LEAVE_BLOCK_1_]
	MOV	CS:[LENGHT_OF_HEADER_],DX
	SHL	DX,CL
	MOV	CX,DX
	CALL	COPY_HEADER
	REP	MOVSB
	POP	DS
	XOR	DX,DX
	CALL	ENT
	CLC
	RET

	;DS:DX-BEGIN_BUF
	;BX:CX-LEN PROG
LEN_L_	DW	0
LEN_H_	DB	0
ENDP

CREATE_NEW_FILE	PROC
	;SI-OFFSET FILE NAME
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	CREATE_COM

CREATE_EXE:
	PUSH	CS
	POP	ES
	MOV	CX,CS:[LENGHT_]
	XOR	BH,BH
	MOV	BL,CS:[HIGH_LENGHT_]
CREATE_SAVING_FILE:
	JMP	SAVE_FILE
CREATE_COM:
	MOV	DS,CS:[START_SEG_]
	XOR	DX,DX
	MOV	CX,CS:[LENGHT_]
	XOR	BX,BX
	PUSH	CS
	POP	ES
	JMP	SHORT	CREATE_SAVING_FILE
ENDP
UNPACK	PROC	NEAR
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	SI
	PUSH	DI
	
	PUSH	SI
	MOV	AX,CS:[LEAVE_BLOCK_]
	MOV	DS,AX
	XOR	DX,DX
	PUSH	CS
	POP	ES
	XOR	AX,AX
	INC	AX
	CMP	CS:[TYPE_OF_FILE_],1
	JZ	LOAD_COM_F
	DEC	AX
LOAD_COM_F:
	CALL	LOAD_FILE
	CALL	UNPACKING
	POP	BX
	CALL	CREATE_NEW_FILE

	POP	DI
	POP	SI
	POP	DX
	POP	CX
	POP	BX
	RET
INT_1_OFF_	DW	0
INT_1_SEG_	DW	0
COMMAND_SEQ_1_:
	MOV	DI,100H
COMMAND_SEQ_2_:
	MOV	DI,AX
	RETF
OLD_AX_	DW	0
OLD_BP_	DW	0
ENDP
UNPACKING	PROC	NEAR
	PUSH	AX
	PUSH	BX
	CMP	CS:[METHOD_],1
	JNZ	NEXT_1
	CALL	UNPACK_PKLITE
NEXT_1:
	CMP	CS:[METHOD_],100H
	JNZ	NEXT_2
	CALL	UNPROTECT_RPS
NEXT_2:
	POP	BX
	POP	AX
	RET
	;DS:SI-OLD STACK
	;ES:DI-BEGIN ADRESS OF PROGRAM
	;CL:DX-MAX ABS ES:DI
ENDP




UNPROTECT_RPS	PROC
	LEA	SI,INT_1
	PUSH	CS
	POP	DS
	CALL	INIT_INT
	MOV	CS:[INT_1_OFF_],SI
	MOV	CS:[INT_1_SEG_],DS

	MOV	AX,100H
	MOV	BX,CS:[LEAVE_BLOCK_]
	XOR	CX,CX
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	CX
	MOV	AX,CS	
	LEA	SI,UNPACK_RPS_EXIT
	MOV	DS,AX
	MOV	CX,AX
	MOV	DX,80H
	MOV	BL,01000001B
	CALL	SET_UP_ANALIZER
	ADD	SP,8

	MOV	AX,CS:[LEAVE_BLOCK_]
	MOV	CS:[OLD_SS_],SS
	MOV	CS:[OLD_SP_],SP
	
	MOV	BX,-2
	CLI
	MOV	SS,AX
	MOV	SP,BX
	STI
	pushF
	MOV	BP,SP
	or	BYTE PTR ss:[bp+1],1h
	MOV	BX,100H
	PUSH	AX
	PUSH	BX
	MOV	AX,CS:[LEAVE_BLOCK_]
	MOV	ES,AX
	MOV	DS,AX
	XOR	AX,AX
	MOV	BX,AX
	MOV	CX,AX
	MOV	DX,AX
	MOV	SI,AX
	MOV	DI,AX
	MOV	BP,AX
	IRET
UNPACK_RPS_EXIT:
	CLI
	MOV	SS,CS:[OLD_SS_]
	MOV	SP,CS:[OLD_SP_]
	STI
	MOV	SI,CS:[INT_1_OFF_]
	MOV	DS,CS:[INT_1_SEG_]
	CALL	INIT_INT
	MOV	DX,CS:[AN_BX_]
	XOR	CX,CX
	MOV	ES,CS:[LEAVE_BLOCK_]
	MOV	DI,100H
	RET
ENDP	

UNPACK_PKLITE	PROC
	PUSH	SI
	LEA	SI,INT_1
	PUSH	CS
	POP	DS
	CALL	INIT_INT
	MOV	CS:[INT_1_OFF_],SI
	MOV	CS:[INT_1_SEG_],DS

	MOV	AX,CS	
	LEA	SI,EXIT_1
	MOV	DS,AX
	LEA	DI,COMMAND_SEQ_1_
	MOV	ES,AX
	MOV	CX,AX
	MOV	DX,80H
	MOV	BL,10000000B
	MOV	AX,1110000000000000B
	CALL	SET_UP_ANALIZER
	POP	SI

	MOV	DS,CS:[LEAVE_BLOCK_]
	MOV	DI,DS
	ADD	DI,10H
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	COM_1
	PUSH	ES
	MOV	ES,DI
	MOV	ES:[7],DI
	POP	ES
COM_1:
	MOV	SI,DI
	MOV	CS:[OLD_SS_],SS
	MOV	CS:[OLD_SP_],SP
	
	MOV	AX,-10H
	MOV	BX,-2
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	STACK_COM
	MOV	AX,DS:[0EH]
	MOV	BX,DS:[10H]
STACK_COM:
	ADD	SI,AX
	CLI
	MOV	SS,SI
	MOV	SP,BX
	STI
	pushF
	MOV	BP,SP
	or	BYTE PTR ss:[bp+1],1h
	MOV	AX,DI
	MOV	BX,100H
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	SEG_COM
	MOV	BX,DS:[14H]
	ADD	AX,DS:[16H]
	ADD	AX,10H
SEG_COM:
	SUB	AX,10H
	PUSH	AX
	PUSH	BX
	MOV	AX,CS:[LEAVE_BLOCK_]
	MOV	ES,AX
	MOV	DS,AX
	XOR	AX,AX
	MOV	BX,AX
	MOV	CX,AX
	MOV	DX,AX
	MOV	SI,AX
	MOV	DI,AX
	MOV	BP,AX
	IRET
EXIT_1:

	MOV	CS:[OLD_AX_],AX
	MOV	CS:[OLD_BP_],BP
	MOV	AX,SS
	CLI
	XCHG	AX,CS:[OLD_SS_]
	MOV	SS,AX
	XCHG	SP,CS:[OLD_SP_]
	STI
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	SI
	PUSH	DI
	PUSH	DS
	PUSH	ES


	MOV	AX,CS	
	LEA	SI,EXIT_2
	MOV	DS,AX
	LEA	DI,COMMAND_SEQ_2_
	MOV	ES,AX
	MOV	CX,AX
	MOV	DX,80H
	MOV	BL,10001000B
	MOV	AX,1110000000000000B
	CALL	SET_UP_ANALIZER
	
	POP	ES
	POP	DS
	POP	DI
	POP	SI
	POP	DX
	POP	CX
	POP	BX
	MOV	AX,SS
	CLI
	XCHG	AX,CS:[OLD_SS_]
	MOV	SS,AX
	XCHG	SP,CS:[OLD_SP_]
	STI
	PUSHF
	MOV	BP,SP
	OR	BYTE PTR SS:[BP+1],00000001B
	MOV	AX,CS:[CURRENT_ADRESS_SEG_]
	PUSH	AX
	MOV	AX,CS:[CURRENT_ADRESS_OFF_]
	PUSH	AX
	MOV	AX,CS:[OLD_AX_]
	MOV	BP,CS:[OLD_BP_]
	IRET
EXIT_2:

	POP	DI
	POP	ES
	MOV	AX,SS
	MOV	DS,AX
	MOV	SI,SP
	CLI
	MOV	SS,CS:[OLD_SS_]
	MOV	SP,CS:[OLD_SP_]
	STI

	PUSH	SI
	PUSH	DS
	MOV	SI,CS:[INT_1_OFF_]
	MOV	DS,CS:[INT_1_SEG_]
	CALL	INIT_INT
	POP	DS
	POP	SI

	MOV	DX,CS:[DESTINATION_L_]
	MOV	CL,CS:[DESTINATION_H_]
	XOR	CH,CH
	PUSH	CX
	MOV	ES,CS:[LEAVE_BLOCK_]
	MOV	BX,100H
	CALL	CALCULATE_ABS_ADRESS
	;CL:AX
	POP	BX
	SUB	DX,AX
	SBB	BL,CL
	MOV	CL,BL
	RET
ENDP

CREATE_NEW_FILE	PROC	NEAR
	;DS:SI-OLD STACK
	;ES:DI-BEGIN ADRESS OF PROGRAM
	;CL:DX-MAX ABS ES:DI
	;BX-OFFSET FILE NAME
	CMP	BYTE PTR CS:[TYPE_OF_FILE_],1
	JZ	CREATE_COM
	PUSH	BX
	;CL:DX
	ADD	DX,(HEADER_)*16
	JNC	UNPACK_2
	INC	CL
UNPACK_2:
	MOV	CS:[LENGHT_],DX
	MOV	CS:[HIGH_LENGHT_],CL
	MOV	BL,CL
;EXE	
	

;LEN
	MOV	CL,9
	MOV	AX,DX
	AND	DX,1FFH
	SHR	AX,CL
	DEC	CL
	DEC	CL
	XOR	BH,BH
	SHL	BX,CL
	OR	BX,AX
	INC	BX
	MOV	CS:[NUMBER_OF_FIELDS_],BX
	MOV	CS:[LAST_FIELD_],DX

;SS:SP
	MOV	DX,DS
	SUB	DX,CS:[LEAVE_BLOCK_]
	SUB	DX,10H
	MOV	CS:[BEGIN_SS_],DX
	MOV	CS:[BEGIN_SP_],SI

;CS:IP
	MOV	DX,ES
	SUB	DX,CS:[LEAVE_BLOCK_]
	SUB	DX,10H
	MOV	CS:[BEGIN_IP_],DI
	MOV	CS:[BEGIN_CS_],DX
	JMP	SHORT	CREATE_COPY
CREATE_COM:
	PUSH	BX
	MOV	BL,CL
	XOR	BH,BH
	MOV	CX,DX
	MOV	DX,CS:[LEAVE_BLOCK_]
	ADD	DX,10H
	MOV	DS,DX
	XOR	DX,DX
	PUSH	CS
	POP	ES
	POP	SI
	JMP	SHORT	CREATE_SAVING_FILE
CREATE_COPY:
	MOV	DI,100H-(HEADER_)*16
	MOV	ES,CS:[LEAVE_BLOCK_]
	LEA	SI,EXEC_DETECTION_
	PUSH	CS
	POP	DS
	MOV	CX,(HEADER_)*8
	CLD
	REP	MOVSW
CREATE_EXE:
	MOV	DX,ES
	ADD	DX,10h-HEADER_
	MOV	DS,DX
	XOR	DX,DX
	POP	SI
	PUSH	CS
	POP	ES
	MOV	CX,CS:[LENGHT_]
	XOR	BH,BH
	MOV	BL,CS:[HIGH_LENGHT_]
CREATE_SAVING_FILE:
	CALL	SAVE_FILE
	RET
ENDP
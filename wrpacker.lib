WRITE_PACKER	PROC
	PUSH	AX
	PUSH	BX
	PUSH	DX
	PUSH	SI
	PUSH	DS

	PUSH	CS
	POP	DS
	LEA	SI,FILE_
	CALL	WRITE_WORD
	MOV	SI,CS:[FILE_NAME_ADRESS_]
	CALL	WRITE_WORD
	LEA	SI,IS_
	CALL	WRITE_WORD
	MOV	AX,CS:[METHOD_]
	LEA	SI,PACKED_
	OR	AH,AH
	JZ	WRITE_PACKER_1
	LEA	SI,PROTECTED_
WRITE_PACKER_1:
	PUSH	AX
	CALL	WRITE_WORD
	LEA	SI,BY_
	CALL	WRITE_WORD
	POP	AX
	OR	AH,AH
	JZ	WRITE_PACKER_2
	CALL	WRITE_NAME_OF_PROTECTOR
	JMP	SHORT	WRITE_PACKER_3
WRITE_PACKER_2:
	CALL	WRITE_NAME_OF_PACKER
WRITE_PACKER_3:
	MOV	AX,CS:[PACKER_VERSION_]
	OR	AX,AX
	JZ	WRITE_PACKER_4
	MOV	DX,AX
	XOR	AL,AL
	XCHG	AL,AH
	MOV	CS:[VER_1_],AX
	LEA	BX,VER_1_
	PUSH	BX
	CALL	PRINT_H_D
	XOR	DH,DH
	MOV	CS:[VER_1_],DX
	MOV	DL,'.'
	MOV	AH,2
	INT	21H
	POP	BX
	CALL	PRINT_H_D
WRITE_PACKER_4:
	CALL	ENT
	POP	DS
	POP	SI
	POP	DX
	POP	BX
	POP	AX
	RET
WRITE_NAME_OF_PACKER	PROC
	PUSH	AX
	LEA	SI,M_PKLITE_
	CALL	WRITE_WORD
	POP	AX
	RET
ENDP
WRITE_NAME_OF_PROTECTOR	PROC
	PUSH	AX
	LEA	SI,M_RPS_
	CALL	WRITE_WORD
	POP	AX
	RET
ENDP
VER_1_	DW	0
IS_	DB	' is ',0
BY_	DB	'by ',0
PACKED_	DB	'packed ',0
PROTECTED_	DB	'protected ',0

M_PKLITE_	DB	'PKLITE ',0
M_RPS_	DB	'RPS ',0
ENDP	
